큐

큐는 도착한 순서대로 데이터를 꺼내서 사용하는 선형 자료구조다. 
큐는 먼저저장된것이 먼저 꺼내지는 선입선출 구조다.
즉시처리하지 않아도 되는 일이라면 큐에 넣어놓고 순서대로 그일을 처리할때 응용할 수있다.

큐는 레어에서 데이터를 추가하고 프론트에서 데이터를 읽는 구조를 갖는다.
배열이나 연결리스트를 사용해 구현할 수 있다.

큐와 연관된 추상적 자료형의 변형으로 Priority Queue와 Double - ended Queue(데크) 가 있다.
프라이어리티 큐는 요소들에게 우선순위를 매겨 선입선출 순서가 아니라 우선순위가 높은 요소부터 빼내는 기능이 있다.
데크는 프론트와 레어 양쪽모두에서 데이터를 넣거나 뺄 수 있는 기능이 있다.

**
고정배열을 사용한 큐의 구현
배열을 사용해 큐를 구현하는 가장 단순한 구현은 고정된 배열을 할당하고 프론트와 레어인덱스를 관리하면서 큐를 구현하는것이다.
배열에 새 데이터를 
추가할 때, 레어 인덱스가 가리키는 배열요소에 데이터를 넣고 데이터를 읽으며
제거할 때, 프론트 인덱스가 있는 배열 요소를 제거한다.


**
프론트에서 배열요소를 제거할 때는 
프론트 인덱스를 프론트 다음요소로이동하는 방식을 사용하거나
제거할 인덱스 뒤의 모든 요소를 프론트쪽으로 당겨오는 방식이 있다.

프론트 인덱스를 옮겨서 제거하는 방식은 레어인덱스가 고정배열크기만큼 이동하면 더이상 큐에 데이터를 넣을 수 없다.
프론트인덱스가 계속 이동해서 최대 고정배열 크기만큼만 이동할 수 있다. 
즉 큐에 저장할 수 있는 최대 데이터수는 배열의 크기와 같다.

프론트가 제거될때마다 배열요소를 모두 앞으로 당기는 방식은 
제거된 요소만큼 계속 데이터를 넣을 수 있지만 큐에서 데이터를 꺼낼때마다 연산을 처리해야하므로 느리다.

고정배열로 큐를 구현할 때 발생하는 이러한 문제를 원형배열을 이용해서 무한루프로 만들어 해결할 수 있다.


###
원형배열을 이용한 큐의 구현
고정배열의 문제점 >>> 원형배열로 해결
물론 원형배열도 전체 배열의 갯수가 다차면 추가하기 힘들지만 이건 다이나믹 어레이로 구현해볼수 있다. 

인덱스 0번은 비우고 1번을 프론트 인덱스로 지정
인덱스4가 레어인덱스로 지정 
mod연산자를 사용해서 마지막배열에 도착했을때 첫번째 인덱스로 돌아오게 만드는게 가능함

front = (front +1) % A.length; 를 쓰면되는데 코드 구현하면서 이해해봐야겠음.

1. 큐의 초기상태에서 프론트와 레어인덱스는 -1로 설정한다.
2. 큐에 데이터를 처음 추가할때, A[0]에 넣고 프론트와 레어는 0이된다.
3. 큐에 데이터를 추가할때 (Enqueue) 큐가 가득찬 상태인지 체크하고 가득차지 않았으면
   다음위치 즉, (Rear + 1)% A.Length 로 이동하여 데이터를 추가한다.
   큐가 가득찼는지 확인하는 방법은 레어와 프론트가 같은지 체크하면 되는데 
   식으로는 (Rear + 1) % A.Length == front 로 표현가능
4. DEqueue할때는 먼저 큐가 비어있는지 체크하고
   비어있지 않으면 데이터를 읽는다.  프론트를 하나 증가시킨다. 프론트를 하나 증가시키는 식은 Front = (Front +1)%A.Length
   큐에서 마지막 요소를 읽을 때 즉 프론트와 레어가 같을때 데이터를 읽어낸 후 프론트와 레어를 -1로 표시한다.



연결리스트로 구현한 큐
연결리스트를 이용해서 큐를 구현하는 로직
큐에서 새 데이터를 추가하기 위해서 연결리스트의 마지막 노드에 새 노드를 추가한다.
디큐는 연결리스트의 첫 노드를 읽어오면 된다.

연결리스트를 구현할때 헤드와 테일을 갖게하고 테일을 통해 인큐하고 헤드를 통해 디큐하면 간단히 구현할 수 있다. 



.NET에서 의 큐
닷넷에서는 큐의 요소가 object타입인 

system.collections.queue
system.collections.generic.queue<T>
ConcurrentQueue<T> 

이렇게 세 클래스가 있다.

Queue<int> q = new Queue<int>();
q.Enqueue(1);
q.Enqueue(2);
q.Enqueue(3);

int data = q.Dequeue();
console.writheline(data);

foreach(var item in q)
{
	console.writeline(item);
}

이런식으로 적용가능



