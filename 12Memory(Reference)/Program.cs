
// 함수가 처리될때 그림으로 메모리의 상황이 어떻게 변하는지
// 그려보면서 설명 할 수 있어야 해... 그래야 프로그램이 쉬워져

//코드
//데이터
// 힙 : 객체만들때 뒷부분 new 클래스명();에서 만들어진 클래스 객체들의 본체를 저장하는 메모리장소
// 스택 : 함수들의 실행 메모리 영역(그 박스안에 들어있는 지역변수)



class Player
{
    public int att =10;
    public int hp=100;
    // 함수의 추가설명 인자에 클래스를 넣을 수 있다. 레퍼런스형이라고 부름
    // 기본자료를 선언만하면 값형임
    // 내가만든 클래스를 new class명 (); 해서 만든걸 그 클래스명에 받으면 그건 레퍼런스형임
    public void Damage(Monster _monster)
    {
       hp -= _monster.att;
    }
}
class Monster
{
    public int att =10;
    public int hp =100;
    public void Damage(Player _player)
    {
        hp -= _player.att;
    }
}

class Program
{
    static void Main(string[] args)
    {
         
        Monster monster = new Monster();
        //Monster monster// 앞부분은 메인 메모리에 저장되고 힙에 저장된 내용을 가르키는 역할
        //new Monster(); 뒤에 있는 애는 힙에 저장됨 실제로 참조되는 값을 의미함
        //hp 100 att 10
        Player player = new Player();
        // 우리가 배웠던대로라면 위에 함수에서 뭘하든 메인의 값은 변하면 안됨
        //플레이어가 자신의 공격력으로 몬스터를 때린것 하지만 적용될리가 없어야함
        monster.Damage(player);
        //하지만 값이 들어감
        // 클래스가 객체화된 녀석은 레퍼선스 형이라고 하는 자료형이고

        // 지금까지 본 int bool 이런녀석들은 값형이라고 한다. 
        //이 값형과 레퍼런스형은 메모리의 위치와 사용법이 다르기 때문에 
        // 다르게 동작한다. 
        //레퍼런스형인 객체화 된 클래스를 인자로 받아오면 먹히고
        // (int _dmg) 이렇게 값형으로 받은 애들은 안바뀜
        //메모리에 저장되는 위치가 다르기 때문인데 레퍼런스형은 스택의 메인메모리 안에서 객체를 만들어 메인에 힙의 주소를 메인에 저장한다
        // 그래서 힙에서 주소를 참조함 실제 레퍼런스내용은 힙에저장됨
        // 값형은 스택안에 메인메모리가 있는 밖에서 참조되기 때문이다.


        // 안에 값을 끌어내고 싶으면 .을 누르면 나오는데
        // 내가 가리키고 있는 위치에 있는 hp를 
    }
}