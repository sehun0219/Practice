
Tree

배열, 연결리스트, 큐, 스택 같은 자료구조는 데이터가 선형적으로 나열된 구조 (Linear Data Structure)
Tree나 Graph는 여러 노드들이 가지처럼 연결되어 있는 Non Linear Data Structure.
계층적구조를 가지는 사이클이 없는 그래프의 일종.

가장위의 하나의 루트로 부터 출발. 그 밑에 자식 노드들을 가지는 구조
자식노드들은 각각 다시 자기자신의 자식노드들을 가질 수 있다.
하나의 자식은 2개이상의 부모를 가질수는 없다. 자식은 하나의 부모노드만 가질수 있다. 

트리에서 사용되는 용어들
Root - 가장 꼭대기에 있는 노드
Edge - 두 노드를 잇는 링크 (선)
Child - 부모 노드 밑의 자식 노드
Parent - 자식 노드 위에 연결된 부모 노드
Sibling - 부모가 같은 자식 노드들
Leaf - 가장 아래 즉, 자식노드를 갖지 않는 하단의 노드
Height - 특정노드의 길이 아래에서 위 방향
Depth - 노드들의 길이 위에서 아래방향
Tree Height - 가장 먼 거리에 있는 leaf 노드와 루트의 길이
Tree Depth - 루트와 노드에서 가장 먼 leaf의 길이
Level - 루트의 레벨은 1 하나씩 높아짐
Node Degree - 한 노드의 서브트리의 갯수
Tree Degree - 트리 안 노드들의 차수 중 최대 차수


사용되는 예
회사나 기관의 조직도, 시/군/구 계층적 지역 데이터, 디렉토리 파일 시스템, 데이터베이스 인덱스 같은 구조에서 흔히 쓰인다.




트리구조의 표현

N-링크 표현법(N-Link Expression)
가장 직관적으로 표현한 방식. 각 노드에 최대 차수 N개 만큼의 링크를 두어 트리를 표현
N = 최대 차수 
하지만 모든 노드가 최대차수로 이어진것은 아니므로 메모리 낭비가 있음.
dynamic array 개념을 응용해서 메모리사용을 줄일 수 있다.

왼쪽 자식 - 오른쪽 형제 노드 표현법(Left Child Right Sibling Expression, LCRS)
모든 노드에 링크를 2개씩준다.
첫번째 링크는 자식노드를 가리키고 두번째 링크는 자신의 오른쪽 형제노드를 가리키도록 표현한다.
노드의 링크가 2개로 고정되어 있다. 
그래서 링크관리가 간단하다. 



.NET에서는 Tree클래스를 제공하고 있지 않다. 개발자가 상황에 맞는 트리구조를 만들어야 한다.
이진트리나 이진 탐색 트리에 대해서도 제공하고 있지 않다. 
비슷한 구조를 제공하긴하는데 SortedDictionary 클래스는 내부적으로 이진 탐색 트리를 사용해서 구현한다. 











